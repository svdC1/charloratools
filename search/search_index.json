{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#charloratools","title":"<code>charloratools</code>","text":"<p>Provides comprehensive tools for processing, filtering and managing directories containing images, (i.e Image Datasets), present in the system.</p> <p>Designed to facilitate the process of manually separating, comparing and performing other time-consuming tasks with image files when cleaning an image dataset.</p> <p>Originally created to speed up the process of cleaning datasets used for Stable Diffusion LoRa training (hence the name), it leverages <code>facenet_pytorch</code>'s implementation of advanced face detection and recognition ML models <code>(MTCNN and InceptionResnetv1)</code> and <code>ImageHash</code>'s implementation of robust hashing algorithms for image files to provide useful and accurate means of handling diverse image datasets.</p> Key Features <ul> <li> <p>Facial Recognition: Utilizes pre-trained models from <code>facenet_pytorch</code>                           to provide robust, and easy-to-use, face detection                           and recognition.</p> </li> <li> <p>Image Comparison: Allows choosing between the various hashing algorithms                         implemented by ImageHash library (p-hash, d-hash,                         avg_hash, crop-resistant-hash) to easily provide                         more flexible means of comparing different images.</p> </li> <li> <p>Social Media Scrapers - Beta: Effortlessly scrape images from platforms                                     like VSCO and Instagram, managing                                     authentication and media retrieval.</p> </li> <li> <p>Image Management: Organize and filter images, automatically                         delete corrupted image files, programatically                         add and delete any image from a directory                         with python operators, and other useful                         functionalities.</p> </li> <li> <p>Command-Line Interface: Provides CLI utilities to easily install the                               correct distribution of PyTorch by analyzing                               the user's system (Wether CUDA or ROCm is                               present, OS platform, etc...), avoiding                               common torch installation errors.</p> </li> <li> <p>Error Handling: Custom exceptions to provide more information when an                       error occurs during processing.</p> </li> </ul> <p>Examples:</p> <p>Install with pip <pre><code>pip install charloratools\n</code></pre> Run torch installation command <pre><code>charloratools install_torch\n</code></pre> <code>The script automatically detects if torch is already installed and skips installation if it is.</code></p> <p>Modules:</p> Name Description <code>FilterAI</code> <p>Provides functionality for face detection and recognition using the <code>facenet_pytorch</code>.</p> <code>SysFileManager</code> <p>Provides classes and functions for managing and processing image files.</p> <code>Scrapers</code> <p>Provides context manager classes for scraping and downloading media images from social media platforms.</p> <code>utils</code> <p>Provides utility functions for image processing, facial recognition and scraping functionalities</p> <code>cli</code> <p>Provides command-line interface <code>(CLI)</code> utilities for managing the installation of PyTorch with varying configurations</p> <code>errors</code> <p>Defines custom exception classes used throughout the application to handle various types of errors</p>"},{"location":"cli/","title":"cli","text":""},{"location":"cli/#charloratools.cli","title":"<code>charloratools.cli</code>","text":"<p>Provides command-line interface <code>(CLI)</code> utilities for managing the installation of PyTorch with varying configurations It also includes functions to check the system's available resources such as CUDA and ROCm.</p> <p>Functions:</p> Name Description <code>run_os_command</code> <p>Executes a system command and manages error handling.</p> <code>get_cuda_version</code> <p>Checks if CUDA is available and returns the installed version.</p> <code>check_rocm</code> <p>Determines if ROCm (AMD GPU support) is available on the system.</p> <code>get_os</code> <p>Detects the operating system being used.</p> <code>install_torch_cpu</code> <p>Installs the CPU-only version of PyTorch.</p> <code>install_torch_cuda</code> <p>Installs PyTorch with CUDA support based on the provided version.</p> <code>install_torch_rocm</code> <p>Installs PyTorch with ROCm support for AMD GPUs (Linux only).</p> <code>get_torch_version</code> <p>Retrieves the installed version of PyTorch.</p> <code>run_install_script</code> <p>Checks system details and runs the appropriate installation script for PyTorch.</p> <code>main</code> <p>Main entry point for the CLI utility.</p> <p>Examples:</p> <p>This module is intended to be used as a command-line utility for setting up the PyTorch environment. You can call it with specific commands to install the appropriate version of PyTorch based on your system config. <pre><code>python -m charloratools.cli install_torch\n</code></pre> If <code>charloratools</code> was installed through pip <pre><code>charloratools install_torch\n</code></pre> This command checks the current system specifications and installs the correct version of PyTorch (CPU-only, CUDA, or ROCm) as appropriate.</p> <p>Raises:</p> Type Description <code>TorchNotInstalledError</code> <p>Raised when the required PyTorch library cannot be imported during the installation script.</p> <code>InvalidInputError</code> <p>Raised when invalid inputs are provided, for example, unsupported CUDA or ROCm options.</p> <code>RuntimeError</code> <p>Raised when there is a failure in the installation commands or if the operating system cannot be determined.</p> <code>FileNotFoundError</code> <p>Raised when expected commands, like nvidia-smi or nvcc, are not found in the system.</p>"},{"location":"cli/#charloratools.cli.check_rocm","title":"<code>check_rocm() -&gt; bool | None</code>","text":"<p>Checks if ROCm (AMD GPU) is available.</p> <p>Returns:</p> Type Description <code>bool or None</code> <p>True if ROCm is detected, False otherwise. If an error occurs, returns None.</p>"},{"location":"cli/#charloratools.cli.get_cuda_version","title":"<code>get_cuda_version() -&gt; str | None</code>","text":"<p>Checks if CUDA is available and returns the installed version.</p> <p>Returns:</p> Type Description <code>str or None</code> <p>The installed CUDA version if available, otherwise None.</p>"},{"location":"cli/#charloratools.cli.get_os","title":"<code>get_os() -&gt; str | None</code>","text":"<p>Detects the operating system.</p> <p>Returns:</p> Type Description <code>str or None</code> <p>The name of the operating system or None if detection fails.</p>"},{"location":"cli/#charloratools.cli.get_torch_version","title":"<code>get_torch_version() -&gt; str | None</code>","text":"<p>Retrieves the installed version of PyTorch.</p> <p>Returns:</p> Type Description <code>str or None</code> <p>The version of PyTorch installed or None if the installation is not found.</p>"},{"location":"cli/#charloratools.cli.install_torch_cpu","title":"<code>install_torch_cpu() -&gt; None</code>","text":"<p>Installs the CPU-only version of PyTorch.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If an error occurs while installing the CPU-only version of PyTorch.</p>"},{"location":"cli/#charloratools.cli.install_torch_cuda","title":"<code>install_torch_cuda(cuda_version: str | None) -&gt; None</code>","text":"<p>Installs PyTorch with CUDA support.</p> <p>Parameters:</p> Name Type Description Default <code>cuda_version</code> <code>str or None</code> <p>The version of CUDA to install for PyTorch. If None, attempts a CPU-only installation.</p> required <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If an error occurs while installing the CUDA version of PyTorch.</p>"},{"location":"cli/#charloratools.cli.install_torch_rocm","title":"<code>install_torch_rocm() -&gt; None</code>","text":"<p>Installs PyTorch with ROCm support (Linux Only).</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If an error occurs while installing the ROCm version of PyTorch.</p>"},{"location":"cli/#charloratools.cli.main","title":"<code>main()</code>","text":"<p>Main entry point for the CLI utility.</p>"},{"location":"cli/#charloratools.cli.run_install_script","title":"<code>run_install_script() -&gt; None</code>","text":"<p>Checks system details and runs the appropriate installation script for PyTorch.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the operating system cannot be determined or if a setup fails.</p>"},{"location":"cli/#charloratools.cli.run_os_command","title":"<code>run_os_command(command_args: list) -&gt; subprocess.CompletedProcess</code>","text":"<p>Runs a system command and manages error handling.</p> <p>Parameters:</p> Name Type Description Default <code>command_args</code> <code>list</code> <p>The command and its arguments to run in the operating system.</p> required <p>Returns:</p> Type Description <code>CompletedProcess</code> <p>The result of the executed command, including stdout, stderr, and return code.</p>"},{"location":"errors/","title":"errors","text":""},{"location":"errors/#charloratools.errors","title":"<code>charloratools.errors</code>","text":"<p>Defines custom exception classes used throughout the application to handle various types of errors</p> Error Categories <ul> <li>Image Errors</li> <li>General Errors</li> <li>Selenium Errors</li> <li>Shared Errors</li> <li>Torch Errors</li> </ul> <p>Examples:</p> <pre><code>from charloratools.errors import ImageIsUnopenableError\ntry:\n    # some code that may fail\nexcept ImageIsUnopenableError as e:\n    print(f\"Error: {e}\")\n</code></pre> <p>Classes:</p> Name Description <code>ImageIsUnopenableError</code> <p>Exception raised when an image cannot be opened, indicating issues like corruption or incorrect format.</p> <code>ImageTypeNotSupportedError</code> <p>Exception raised for unsupported image types, indicating that the format is not recognized by the application.</p> <code>ImageIsDeletedError</code> <p>Exception raised when an operation is attempted on an image that has been marked as deleted.</p> <code>ImgDeleteError</code> <p>Exception raised when deleting an image fails due to system errors or permission issues.</p> <code>ImgOperationError</code> <p>Exception raised for general errors during image operations that are not covered by more specific exceptions.</p> <code>ImgHashNotSupportedError</code> <p>Exception raised for unsupported image hashing methods, indicating a failure to hash images correctly.</p> <code>InvalidTypeError</code> <p>Exception raised for invalid types encountered in the application, indicating a type mismatch.</p> <code>OutOfRangeError</code> <p>Exception raised when a value is outside the acceptable range, such as exceeding defined limits.</p> <code>InvalidInputError</code> <p>Exception raised for invalid user inputs, such as missing or incorrectly formatted parameters.</p> <code>InvalidPathError</code> <p>Exception raised when a specified path does not exist or is invalid.</p> <code>FailedToAddOptionsArgumentError</code> <p>Exception raised when failing to add arguments to the WebDriver during Selenium configuration.</p> <code>DriverInitializationError</code> <p>Exception raised when the Selenium WebDriver fails to initialize, often due to environment issues.</p> <code>ErrorScrollingPage</code> <p>Exception raised when an error occurs while scrolling a webpage with Selenium.</p> <code>VSCOSignInError</code> <p>Exception raised for errors during signing into VSCO.</p> <code>XSignInError</code> <p>Exception raised for errors during signing into X.</p> <code>InstaSignInError</code> <p>Exception raised for errors during signing into Instagram.</p> <code>NoImagesFoundInGalleryError</code> <p>Exception raised when no images are found in a specified gallery during operations.</p> <code>NoImagesFoundError</code> <p>Exception raised when no images are found during an expected operation.</p> <code>UsernameNotFoundError</code> <p>Exception raised when a specified username cannot be located in relevant contexts.</p> <code>ImageDownloadError</code> <p>Exception raised for errors during the image downloading process due to various issues.</p> <code>NoImagesInDirectoryError</code> <p>Exception raised when no images are found in the specified directory.</p> <code>NoFaceDetectedInReferenceImage</code> <p>Exception raised when no face is detected in the provided reference image.</p> <code>InfoDictFormatError</code> <p>Exception raised for format errors in the info dictionary returned by FaceRecognizer filtering methods.</p> <code>FileOrDirPermissionDeniedError</code> <p>Exception raised when permission is denied for file or directory operations.</p> <code>OperationNotSupportedError</code> <p>Exception raised when an attempted operation is not supported in the current context.</p> <code>OperationResultsInEmptyDirectoryError</code> <p>Exception raised when an operation would result in an empty directory.</p> <code>TorchNotInstalledError</code> <p>Exception raised when the required PyTorch library is not found in the environment.</p>"},{"location":"errors/#charloratools.errors.DriverInitializationError","title":"<code>DriverInitializationError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when the Selenium WebDriver fails to initialize.</p> <p>This error indicates that the driver could not be created, often due to environment issues or configuration errors.</p>"},{"location":"errors/#charloratools.errors.ErrorScrollingPage","title":"<code>ErrorScrollingPage</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when an error occurs while scrolling a webpage.</p> <p>This error indicates issues encountered during the scrolling process with the Selenium WebDriver.</p>"},{"location":"errors/#charloratools.errors.FailedToAddOptionsArgumentError","title":"<code>FailedToAddOptionsArgumentError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when a failure occurs while adding options to the WebDriver.</p> <p>This error flags problems encountered when configuring the Selenium WebDriver, such as invalid option arguments.</p>"},{"location":"errors/#charloratools.errors.FileOrDirPermissionDeniedError","title":"<code>FileOrDirPermissionDeniedError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when file or directory access is denied.</p> <p>This error indicates issues with permissions preventing file or directory operations from succeeding.</p>"},{"location":"errors/#charloratools.errors.ImageDownloadError","title":"<code>ImageDownloadError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when an error occurs during image downloading.</p> <p>This error indicates that there was a failure in retrieving an image from a specified source.</p>"},{"location":"errors/#charloratools.errors.ImageIsDeletedError","title":"<code>ImageIsDeletedError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when an operation is attempted on a deleted image.</p> <p>This error indicates that the image has been marked as deleted and cannot be processed.</p>"},{"location":"errors/#charloratools.errors.ImageIsUnopenableError","title":"<code>ImageIsUnopenableError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when an image cannot be opened.</p> <p>This error is raised for issues related to opening an image file, such as corruption or incorrect format.</p>"},{"location":"errors/#charloratools.errors.ImageTypeNotSupportedError","title":"<code>ImageTypeNotSupportedError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when an unsupported image type is encountered.</p> <p>This error indicates that the image file format is not supported by the application.</p>"},{"location":"errors/#charloratools.errors.ImgDeleteError","title":"<code>ImgDeleteError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when there is an error during image deletion.</p> <p>This error is raised if an operation to delete an image fails due to an underlying issue (like file access permissions).</p>"},{"location":"errors/#charloratools.errors.ImgHashNotSupportedError","title":"<code>ImgHashNotSupportedError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when an unsupported image hashing method is requested.</p> <p>This error indicates a failure to use the specified hashing method for image comparison.</p>"},{"location":"errors/#charloratools.errors.ImgOperationError","title":"<code>ImgOperationError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised for general image operation errors.</p> <p>This error indicates a failure in performing an operation on an image that is not covered by more specific exceptions.</p>"},{"location":"errors/#charloratools.errors.InfoDictFormatError","title":"<code>InfoDictFormatError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised for format errors in the info dictionary.</p> <p>This error indicates that the provided dictionary does not conform to the expected structure or content.</p>"},{"location":"errors/#charloratools.errors.InstaSignInError","title":"<code>InstaSignInError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised for errors during signing into Instagram.</p> <p>This error indicates that a sign-in attempt to Instagram has failed.</p>"},{"location":"errors/#charloratools.errors.InvalidInputError","title":"<code>InvalidInputError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised for invalid user inputs.</p> <p>This error indicates that the input provided does not meet the validation requirements.</p>"},{"location":"errors/#charloratools.errors.InvalidPathError","title":"<code>InvalidPathError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when a specified path is invalid.</p> <p>This error indicates that the provided path does not exist or is not accessible.</p>"},{"location":"errors/#charloratools.errors.InvalidTypeError","title":"<code>InvalidTypeError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised for an invalid type encountered in the application.</p> <p>This error indicates that a value does not match the expected type.</p>"},{"location":"errors/#charloratools.errors.NoFaceDetectedInReferenceImage","title":"<code>NoFaceDetectedInReferenceImage</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when no face is detected in the reference image.</p> <p>This error indicates that a required face for processing was not found in the specified image.</p>"},{"location":"errors/#charloratools.errors.NoImagesFoundError","title":"<code>NoImagesFoundError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when no images are found during an operation.</p> <p>This error indicates that an operation expected images but found none.</p>"},{"location":"errors/#charloratools.errors.NoImagesFoundInGalleryError","title":"<code>NoImagesFoundInGalleryError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when no images are found in the gallery.</p> <p>This error indicates that a gallery operation is attempted but there are no images available.</p>"},{"location":"errors/#charloratools.errors.NoImagesInDirectoryError","title":"<code>NoImagesInDirectoryError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when no images are found in a specified directory.</p> <p>This error indicates that an operation that required images found none in the given directory.</p>"},{"location":"errors/#charloratools.errors.OperationNotSupportedError","title":"<code>OperationNotSupportedError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when an attempted operation is unsupported.</p> <p>This error indicates that the functionality requested cannot be fulfilled based on the current context or parameters.</p>"},{"location":"errors/#charloratools.errors.OperationResultsInEmptyDirectoryError","title":"<code>OperationResultsInEmptyDirectoryError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when an operation would result in an empty directory.</p> <p>This error indicates that the requested operation would lead to no files being available wherever applicable.</p>"},{"location":"errors/#charloratools.errors.OutOfRangeError","title":"<code>OutOfRangeError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when a value is out of the expected range.</p> <p>This error is raised when a parameter value exceeds or falls below defined boundaries.</p>"},{"location":"errors/#charloratools.errors.TorchNotInstalledError","title":"<code>TorchNotInstalledError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when the required PyTorch library is not installed.</p> <p>This error indicates that PyTorch is necessary for operations but cannot be found in the environment.</p>"},{"location":"errors/#charloratools.errors.UsernameNotFoundError","title":"<code>UsernameNotFoundError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when a specified username cannot be found.</p> <p>This error indicates that an operation was unable to locate the specified username in relevant contexts, such as scraping.</p>"},{"location":"errors/#charloratools.errors.VSCOSignInError","title":"<code>VSCOSignInError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised for errors during signing into VSCO.</p> <p>This error indicates that a sign-in attempt to VSCO has failed.</p>"},{"location":"errors/#charloratools.errors.XSignInError","title":"<code>XSignInError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised for errors during signing into X.</p> <p>This error indicates that a sign-in attempt to X has failed.</p>"},{"location":"filterai/","title":"FilterAI","text":""},{"location":"filterai/#charloratools.FilterAI","title":"<code>charloratools.FilterAI</code>","text":"Functionalities <ul> <li>face detection and recognition using the <code>facenet_pytorch</code></li> <li>Processing images in bulk</li> <li>Filtering images based on face detection</li> <li>Saving images with detection overlays.</li> </ul> <p>Classes:</p> Name Description <code>FaceRecognizer</code> <p>A class that utilizes pre-trained models from <code>facenet_pytorch</code> to detect and recognize faces in a set of images.</p> <p>Raises:</p> Type Description <code>TorchNotInstalledError</code> <p>Raised when the required PyTorch library is not found.</p> <code>InvalidInputError</code> <p>Raised for invalid inputs related to image paths and parameters.</p> <code>NoFaceDetectedInReferenceImage</code> <p>Raised when no face is detected in the provided reference image.</p> <p>Examples:</p> <pre><code>from charloratools.FilterAI import FaceRecognizer\nfr = FaceRecognizer('path/to/images')\nfr.filter_images_without_face('output/directory')\n</code></pre>"},{"location":"filterai/#charloratools.FilterAI.FaceRecognizer","title":"<code>FaceRecognizer(path: str | Path)</code>","text":"<p>Class for using facenet_pytorch pre-trained models to detect and recognize faces.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str or Path</code> <p>Path to the directory containing images.</p> required <p>Raises:</p> Type Description <code>TorchNotInstalledError</code> <p>If PyTorch is not installed on the system.</p>"},{"location":"filterai/#charloratools.FilterAI.FaceRecognizer.__repr__","title":"<code>__repr__()</code>","text":"<p>Returns a detailed string representation of the FaceRecognizer instance.</p> <p>Returns:</p> Type Description <code>str</code> <p>A representation string for the FaceRecognizer instance.</p>"},{"location":"filterai/#charloratools.FilterAI.FaceRecognizer.__str__","title":"<code>__str__()</code>","text":"<p>Returns a string representation of the FaceRecognizer object.</p> <p>Returns:</p> Type Description <code>str</code> <p>A descriptive string of the FaceRecognizer, including the path, number of images, and used torch device.</p>"},{"location":"filterai/#charloratools.FilterAI.FaceRecognizer.change_directory","title":"<code>change_directory(path: str | Path)</code>","text":"<p>Changes the directory of the images used by the FaceRecognizer.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str or Path</code> <p>New path to the directory containing images.</p> required"},{"location":"filterai/#charloratools.FilterAI.FaceRecognizer.filter_images_with_multiple_faces","title":"<code>filter_images_with_multiple_faces(output_dir: str | Path, prob_threshold: float | None = None, min_face_size: int = 20, return_info: bool = False)</code>","text":"<p>Filters images with more than one detected face.</p> <p>Parameters:</p> Name Type Description Default <code>output_dir</code> <code>str or Path</code> <p>Path to the directory where images will be saved.</p> required <code>prob_threshold</code> <code>float</code> <p>Probability threshold for face detection. Defaults to None.</p> <code>None</code> <code>min_face_size</code> <code>int</code> <p>Minimum face size in pixels for detection. Defaults to 20.</p> <code>20</code> <code>return_info</code> <code>bool</code> <p>If True, returns detection information. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>GalleryManager or tuple</code> <p>Returns the GalleryManager for the output directory. If <code>return_info</code> is True, returns a tuple containing the GalleryManager object and a dictionary with filtering info.</p> <p>Raises:</p> Type Description <code>InvalidPathError</code> <p>If the specified output directory is invalid.</p>"},{"location":"filterai/#charloratools.FilterAI.FaceRecognizer.filter_images_without_face","title":"<code>filter_images_without_face(output_dir: str | Path, min_face_size: int = 20, prob_threshold: float | None = None, return_info=False)</code>","text":"<p>Filters images that do not contain detected faces.</p> <p>Parameters:</p> Name Type Description Default <code>output_dir</code> <code>str or Path</code> <p>Path to the directory where images will be saved.</p> required <code>min_face_size</code> <code>int</code> <p>Minimum face size in pixels for detection. Defaults to 20.</p> <code>20</code> <code>prob_threshold</code> <code>float</code> <p>Threshold for face detection probability. Defaults to None.</p> <code>None</code> <code>return_info</code> <code>bool</code> <p>If True, returns detection information. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>GalleryManager or tuple</code> <p>Returns the GalleryManager for the output directory. If <code>return_info</code> is True, returns a tuple containing the GalleryManager object and a dictionary with filtering info.</p> <p>Raises:</p> Type Description <code>InvalidPathError</code> <p>If the specified output directory is invalid.</p>"},{"location":"filterai/#charloratools.FilterAI.FaceRecognizer.filter_images_without_specific_face","title":"<code>filter_images_without_specific_face(ref_img_path: str | Path, output_dir: str | Path, prob_threshold: float = None, min_face_size: int = 20, distance_threshold: float = 0.6, pretrained_model: str = 'vggface2', distance_function: str = 'cosine', return_info: bool = False)</code>","text":"<p>Filters images that do not contain a specific face.</p> <p>Parameters:</p> Name Type Description Default <code>ref_img_path</code> <code>str or Path</code> <p>Path to the reference image containing the face to match.</p> required <code>output_dir</code> <code>str or Path</code> <p>Path to the directory where matched images will be saved.</p> required <code>prob_threshold</code> <code>float</code> <p>Threshold for final face detection probability. Defaults to None.</p> <code>None</code> <code>min_face_size</code> <code>int</code> <p>Minimum face size in pixels for detection. Defaults to 20.</p> <code>20</code> <code>distance_threshold</code> <code>float</code> <p>Threshold for considering faces equal. Defaults to 0.6.</p> <code>0.6</code> <code>pretrained_model</code> <code>str</code> <p>Pre-trained model to use from facenet_pytorch. Defaults to 'vggface2'.</p> <code>'vggface2'</code> <code>distance_function</code> <code>str</code> <p>Distance function for matching 'euclidean' or 'cosine'. Defaults to 'cosine'.</p> <code>'cosine'</code> <code>return_info</code> <code>bool</code> <p>If True, returns detection information. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>GalleryManager or tuple</code> <p>Returns the GalleryManager for the output directory. If <code>return_info</code> is True, returns a tuple containing the GalleryManager object and a dictionary with filtering info.</p> <p>Raises:</p> Type Description <code>InvalidInputError</code> <p>If the provided model or distance function is invalid.</p> <code>NoFaceDetectedInReferenceImage</code> <p>If no face is detected in the reference image.</p> <code>InvalidPathError</code> <p>If the specified output directory is invalid.</p>"},{"location":"filterai/#charloratools.FilterAI.FaceRecognizer.save_images_with_detection_box","title":"<code>save_images_with_detection_box(info_dict_lst: list, output_dir: str | Path, save_only_matched: bool = False)</code>","text":"<p>Saves images with detection boxes drawn to an output directory.</p> <p>This method takes an info dictionary list (from previous filtering methods) and saves the images with the model's detection boxes as red outlines.</p> <p>Parameters:</p> Name Type Description Default <code>info_dict_lst</code> <code>list</code> <p>A list of dictionaries with the following keys: - 'path': File path of the image. - 'boxes': Numpy array of detection boxes returned by the model            or None. - 'matched': Boolean indicating if the image passed the filter.</p> required <code>output_dir</code> <code>str or Path</code> <p>Directory to save images with boxes drawn.</p> required <code>save_only_matched</code> <code>bool</code> <p>If True, saves only matched images (i.e., those where 'matched' is True). Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>GalleryManager</code> <p>Manager for the directory containing saved images.</p> <p>Raises:</p> Type Description <code>TorchNotInstalledError</code> <p>If PyTorch is not installed.</p>"},{"location":"scrapers/","title":"Scrapers","text":""},{"location":"scrapers/#charloratools.Scrapers","title":"<code>charloratools.Scrapers</code>","text":"<p>Provides context manager classes for scraping and downloading media images from social media platforms.</p> <p>Leverages Selenium WebDriver for web automation to facilitate the login, navigation, and retrieval of images from user profiles.</p> <p>Classes:</p> Name Description <code>VSCOScraper</code> <p>Manages the scraping of images from a VSCO user's profile gallery. It handles user authentication and image downloading, ensuring resources are managed correctly.</p> <code>XScraper</code> <p>Manages the scraping of media images from an X user's profile. Facilitates user authentication and downloading media.</p> <code>InstagramScraper</code> <p>Manages the scraping of media images from an Instagram user's profile. This includes user authentication and downloading media.</p> <p>Examples:</p> <p>Create an instance of the desired scraper class within a context <code>(with statement)</code> to ensure proper resource management.</p> <pre><code>from charloratools.Scrapers import VSCOScraper\n    with VSCOScraper(*args) as scraper:\n        scraper.get_vsco_pics()\n</code></pre> <p>Raises:</p> Type Description <code>VSCOSignInError</code> <p>Raised when there is an error during the login process to a VSCO account.</p> <code>InstaSignInError</code> <p>Raised when there is an error during the login process to an Instagram account.</p> <code>XSignInError</code> <p>Raised when there is an error during the login process to an X account.</p> <code>NoImagesFoundError</code> <p>Raised when no images are found during the scraping process.</p>"},{"location":"scrapers/#charloratools.Scrapers.InstagramScraper","title":"<code>InstagramScraper(username: str, password: str, headless: bool = True, incognito: bool = True, add_arguments: list | None = None, webdriver_wait_timeout: int = 10, webpage_wait_time: int = 3)</code>","text":"<p>Context manager for scraping images from an Instagram user's profile media.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The Instagram account login username.</p> required <code>password</code> <code>str</code> <p>The Instagram account password.</p> required <code>headless</code> <code>bool</code> <p>Whether to run the Selenium WebDriver in headless mode. Defaults to True.</p> <code>True</code> <code>incognito</code> <code>bool</code> <p>Whether to run the WebDriver in incognito mode. Defaults to True.</p> <code>True</code> <code>add_arguments</code> <code>list or None</code> <p>Additional arguments for ChromeOptions when initializing the WebDriver. Defaults to None.</p> <code>None</code> <code>webdriver_wait_timeout</code> <code>int</code> <p>Number of seconds to wait before a timeout error is raised when an element can't be found. Defaults to 10.</p> <code>10</code> <code>webpage_wait_time</code> <code>int</code> <p>Number of seconds to wait for a webpage to load using 'time.sleep()'. Defaults to 3.</p> <code>3</code> <p>Raises:</p> Type Description <code>InstaSignInError</code> <p>If there is an error during the login process to the Instagram account.</p>"},{"location":"scrapers/#charloratools.Scrapers.InstagramScraper.__enter__","title":"<code>__enter__()</code>","text":"<p>Initializes the WebDriver and performs login before yielding the scraper instance.</p> <p>Returns:</p> Type Description <code>InstagramScraper</code> <p>The instance of InstagramScraper for use within the 'with' block.</p>"},{"location":"scrapers/#charloratools.Scrapers.InstagramScraper.__exit__","title":"<code>__exit__(exc_type, exc_val, exc_tb)</code>","text":"<p>Cleans up the WebDriver when exiting the context.</p> <p>This method ensures that the WebDriver quits, freeing resources.</p> <p>Parameters:</p> Name Type Description Default <code>exc_type</code> <code>type or None</code> <p>The exception class raised, if any.</p> required <code>exc_val</code> <code>Exception or None</code> <p>The exception instance raised, if any.</p> required <code>exc_tb</code> <code>traceback or None</code> <p>The traceback object, if any.</p> required"},{"location":"scrapers/#charloratools.Scrapers.InstagramScraper.__repr__","title":"<code>__repr__()</code>","text":"<p>Returns a detailed string representation of the InstagramScraper instance.</p> <p>This representation provides a concise view of the instance variables including username and headless/incognito mode settings.</p> <p>Returns:</p> Type Description <code>str</code> <p>A formatted string for the InstagramScraper instance, suitable for debugging.</p>"},{"location":"scrapers/#charloratools.Scrapers.InstagramScraper.__str__","title":"<code>__str__()</code>","text":"<p>Returns a string representation of the InstagramScraper instance.</p> <p>This representation includes the login username and configuration details like headless mode status, incognito status, and additional WebDriver arguments.</p> <p>Returns:</p> Type Description <code>str</code> <p>A formatted string summarizing the state of the InstagramScraper instance.</p>"},{"location":"scrapers/#charloratools.Scrapers.InstagramScraper.get_feed_pics","title":"<code>get_feed_pics(username: str, save_path: str, n: int = 10)</code>","text":"<p>Downloads feed images from a specified Instagram profile.</p> <p>This method retrieves images from the specified user's feed by scrolling the page and extracting image source URLs.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username of the Instagram account to scrape images from.</p> required <code>save_path</code> <code>str</code> <p>The path where the downloaded images will be saved.</p> required <code>n</code> <code>int</code> <p>The number of times to scroll down the page to load more images. Defaults to 10.</p> <code>10</code> <p>Raises:</p> Type Description <code>NoImagesFoundError</code> <p>If no images are found during the scraping process.</p> <code>Exception</code> <p>If any error occurs during the image retrieval process.</p>"},{"location":"scrapers/#charloratools.Scrapers.InstagramScraper.insta_sign_in","title":"<code>insta_sign_in()</code>","text":"<p>Logs into an Instagram account using the Selenium WebDriver.</p> <p>This method performs the login action by interacting with the login elements of the Instagram website.</p> <p>Returns:</p> Type Description <code>webdriver</code> <p>The Selenium WebDriver instance after successfully logging in.</p> <p>Raises:</p> Type Description <code>InstaSignInError</code> <p>If an error occurs during the login process.</p>"},{"location":"scrapers/#charloratools.Scrapers.VSCOScraper","title":"<code>VSCOScraper(email: str, password: str, headless: bool = True, incognito: bool = True, add_arguments: list | None = None, webdriver_wait_timeout: int = 10, webpage_wait_time: int = 3)</code>","text":"<p>Context Manager Type Class to save all images of a VSCO profile gallery using Selenium.</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>str</code> <p>The VSCO account login email.</p> required <code>password</code> <code>str</code> <p>The VSCO account password.</p> required <code>headless</code> <code>bool</code> <p>Whether to run the Selenium WebDriver in headless mode. Defaults to True.</p> <code>True</code> <code>incognito</code> <code>bool</code> <p>Whether to run the Selenium WebDriver in incognito mode. Defaults to True.</p> <code>True</code> <code>add_arguments</code> <code>list or None</code> <p>Additional arguments for ChromeOptions when initializing the WebDriver. Defaults to None.</p> <code>None</code> <code>webdriver_wait_timeout</code> <code>int</code> <p>Number of seconds to wait before a timeout error is raised when the browser cannot find an element. Defaults to 10.</p> <code>10</code> <code>webpage_wait_time</code> <code>int</code> <p>Number of seconds to wait for a webpage to load using 'time.sleep()'. Defaults to 3.</p> <code>3</code> <p>Raises:</p> Type Description <code>VSCOSignInError</code> <p>If an error occurs during the login process.</p>"},{"location":"scrapers/#charloratools.Scrapers.VSCOScraper.__enter__","title":"<code>__enter__()</code>","text":"<p>Initializes the WebDriver and performs login before yielding the scraper instance.</p> <p>Returns:</p> Type Description <code>VSCOScraper</code> <p>The instance of VSCOScraper for use within the 'with' block.</p>"},{"location":"scrapers/#charloratools.Scrapers.VSCOScraper.__exit__","title":"<code>__exit__(exc_type, exc_val, exc_tb)</code>","text":"<p>Cleans up the WebDriver when exiting the context. This method ensures that the WebDriver quits, freeing resources.</p> <p>Parameters:</p> Name Type Description Default <code>exc_type</code> <code>type or None</code> <p>The exception class raised, if any.</p> required <code>exc_val</code> <code>Exception or None</code> <p>The exception instance raised, if any.</p> required <code>exc_tb</code> <code>traceback or None</code> <p>The traceback object, if any.</p> required"},{"location":"scrapers/#charloratools.Scrapers.VSCOScraper.__repr__","title":"<code>__repr__()</code>","text":"<p>Returns a detailed string representation of the VSCOScraper instance.</p> <p>This representation provides a concise view of the instance variables including email and headless/incognito mode settings.</p> <p>Returns:</p> Type Description <code>str</code> <p>A formatted string for the VSCOScraper instance, suitable for debugging.</p>"},{"location":"scrapers/#charloratools.Scrapers.VSCOScraper.__str__","title":"<code>__str__()</code>","text":"<p>Returns a string representation of the VSCOScraper instance. This representation includes the login email and configuration details like headless mode status, incognito status, and additional WebDriver arguments.</p> <p>Returns:</p> Type Description <code>str</code> <p>A formatted string summarizing the state of the VSCOScraper instance.</p>"},{"location":"scrapers/#charloratools.Scrapers.VSCOScraper.get_vsco_pics","title":"<code>get_vsco_pics(username: str, save_path: str, n: int = 10)</code>","text":"<p>Downloads images from a specified VSCO profile gallery.</p> <p>This method retrieves images from the specified user's gallery by scrolling the page and extracting image source URLs.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username of the VSCO account to scrape images from.</p> required <code>save_path</code> <code>str</code> <p>The path where the downloaded images will be saved.</p> required <code>n</code> <code>int</code> <p>The number of times to scroll down the page to load more images. Defaults to 10.</p> <code>10</code> <p>Raises:</p> Type Description <code>NoImagesFoundError</code> <p>If no images are found during the scraping process.</p> <code>Exception</code> <p>If any other error occurs during the image retrieval process.</p>"},{"location":"scrapers/#charloratools.Scrapers.VSCOScraper.vsco_sign_in","title":"<code>vsco_sign_in()</code>","text":"<p>Logs into a VSCO account using the Selenium WebDriver.</p> <p>This method performs the login action by interacting with the login elements of the VSCO website.</p> <p>Returns:</p> Type Description <code>webdriver</code> <p>The Selenium WebDriver instance after logging in successfully.</p> <p>Raises:</p> Type Description <code>VSCOSignInError</code> <p>If an error occurs during the login process.</p>"},{"location":"scrapers/#charloratools.Scrapers.XScraper","title":"<code>XScraper(username: str, password: str, headless: bool = True, incognito: bool = True, add_arguments: list | None = None, webdriver_wait_timeout: int = 10, webpage_wait_time: int = 3)</code>","text":"<p>Context manager for scraping images from an X user's profile media.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The X account login username.</p> required <code>password</code> <code>str</code> <p>The X account password.</p> required <code>headless</code> <code>bool</code> <p>Whether to run the Selenium WebDriver in headless mode. Defaults to True.</p> <code>True</code> <code>incognito</code> <code>bool</code> <p>Whether to run the WebDriver in incognito mode. Defaults to True.</p> <code>True</code> <code>add_arguments</code> <code>list or None</code> <p>Additional arguments for ChromeOptions when initializing the WebDriver. Defaults to None.</p> <code>None</code> <code>webdriver_wait_timeout</code> <code>int</code> <p>Number of seconds to wait before a timeout error is raised when the browser cannot find an element. Defaults to 10.</p> <code>10</code> <code>webpage_wait_time</code> <code>int</code> <p>Number of seconds to wait for a webpage to load using 'time.sleep()'. Defaults to 3.</p> <code>3</code> <p>Raises:</p> Type Description <code>XSignInError</code> <p>If there is an error during the login process to the X account.</p>"},{"location":"scrapers/#charloratools.Scrapers.XScraper.__enter__","title":"<code>__enter__()</code>","text":"<p>Initializes the WebDriver and performs login before yielding the scraper instance.</p> <p>Returns:</p> Type Description <code>XScraper</code> <p>The instance of XScraper for use within the 'with' block.</p>"},{"location":"scrapers/#charloratools.Scrapers.XScraper.__exit__","title":"<code>__exit__(exc_type, exc_val, exc_tb)</code>","text":"<p>Cleans up by quitting the WebDriver when exiting the context.</p> <p>Parameters:</p> Name Type Description Default <code>exc_type</code> <code>type or None</code> <p>The exception class raised, if any.</p> required <code>exc_val</code> <code>Exception or None</code> <p>The exception instance raised, if any.</p> required <code>exc_tb</code> <code>traceback or None</code> <p>The traceback object, if any.</p> required"},{"location":"scrapers/#charloratools.Scrapers.XScraper.__repr__","title":"<code>__repr__()</code>","text":"<p>Returns a detailed string representation of the XScraper instance.</p> <p>This representation provides a concise view of the instance variables including username and headless/incognito mode settings.</p> <p>Returns:</p> Type Description <code>str</code> <p>A formatted string for the XScraper instance, suitable for debugging.</p>"},{"location":"scrapers/#charloratools.Scrapers.XScraper.__str__","title":"<code>__str__()</code>","text":"<p>Returns a string representation of the XScraper instance.</p> <p>This representation includes the login username and configuration details like headless mode status, incognito status, and additional WebDriver arguments.</p> <p>Returns:</p> Type Description <code>str</code> <p>A formatted string summarizing the state of the XScraper instance.</p>"},{"location":"scrapers/#charloratools.Scrapers.XScraper.get_x_pics","title":"<code>get_x_pics(username: str, save_path: str, n: int = 10)</code>","text":"<p>Downloads media images from a specified X profile.</p> <p>This method retrieves images from the specified user's profile by scrolling the page and extracting image source URLs.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username of the X account to scrape media images from.</p> required <code>save_path</code> <code>str</code> <p>The path where the downloaded images will be saved.</p> required <code>n</code> <code>int</code> <p>The number of times to scroll down the page to load more images. Defaults to 10.</p> <code>10</code> <p>Raises:</p> Type Description <code>NoImagesFoundError</code> <p>If no images are found during the scraping process.</p> <code>Exception</code> <p>If any error occurs during the image retrieval process.</p>"},{"location":"scrapers/#charloratools.Scrapers.XScraper.x_sign_in","title":"<code>x_sign_in()</code>","text":"<p>Logs into an X account using the Selenium WebDriver.</p> <p>This method performs the login action by interacting with the login elements of the X website.</p> <p>Returns:</p> Type Description <code>webdriver</code> <p>The Selenium WebDriver instance after logging in successfully.</p> <p>Raises:</p> Type Description <code>XSignInError</code> <p>If an error occurs during the login process.</p>"},{"location":"sysfilemanager/","title":"SysFileManager","text":""},{"location":"sysfilemanager/#charloratools.SysFileManager","title":"<code>charloratools.SysFileManager</code>","text":"<p>Provides classes and functions for managing and processing image files.</p> Functionalities <ul> <li>validating image files</li> <li>resizing</li> <li>copying</li> <li>deleting duplicates</li> <li>generating HTML galleries.</li> </ul> <p>Classes:</p> Name Description <code>ImgManager</code> <p>Manages individual images, including validation, comparison, and processing.</p> <code>GalleryManager</code> <p>Manages collections of images using ImgManager for validation and processing.</p> <code>TmpManager</code> <p>Handles temporary directories for image operations.</p> <p>Functions:</p> Name Description <code>refresh_decorator</code> <p>A decorator for refreshing the image manager's state before and after method execution.</p> <p>Examples:</p> <pre><code>from charloratools.SysFileManager import GalleryManager\ngm1 = GalleryManager(path='path/to/dir1')\ngm2 = GalleryManager(path='path/to/dir2')\n# Add images and create a new directory\ngm3 = gm1 + gm2\n</code></pre>"},{"location":"sysfilemanager/#charloratools.SysFileManager.GalleryManager","title":"<code>GalleryManager(path: str | Path, hashtype: str = 'sha256', show_tqdm: bool = False)</code>","text":"<p>Handles management and validation of a directory of images using the ImgManager class.</p> <p>This class supports operations with other instances and paths to facilitate image management.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str or Path</code> <p>Path to the gallery directory.</p> required <code>hashtype</code> <code>str</code> <p>Type of hash used for image comparisons. Defaults to sha256. Supported hashing types include:   - sha256   - phash   - dhash   - avg_hash   - crop_resistant</p> <code>'sha256'</code> <code>show_tqdm</code> <code>bool</code> <p>If True, enables progress showing during operations. Defaults to False.</p> <code>False</code> <p>Raises:</p> Type Description <code>InvalidPathError</code> <p>If the provided path is not a string or path-like object.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.GalleryManager.__add__","title":"<code>__add__(other)</code>","text":"<p>Adds another GalleryManager instance or image to this instance.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>GalleryManager or str or ImgManager</code> <p>The GalleryManager instance or image path/ImgManager to add to this instance.</p> required <p>Returns:</p> Type Description <code>GalleryManager</code> <p>A new GalleryManager instance containing images from both this instance and the other.</p> <p>Raises:</p> Type Description <code>OperationNotSupportedError</code> <p>If the operation is not supported for the provided other type.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.GalleryManager.__contains__","title":"<code>__contains__(item)</code>","text":"<p>Checks if a given item is present in the gallery.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>ImgManager or list or str</code> <p>The item to check for presence in the gallery. This can be an ImgManager instance, a list of ImgManager instances, or a file path string.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the item or any image from the item is found in the gallery, False otherwise.</p> <p>Raises:</p> Type Description <code>OperatorNotSupportedError</code> <p>If the provided item type is not supported for the operation.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.GalleryManager.__eq__","title":"<code>__eq__(other)</code>","text":"<p>Checks equality between this instance and another GalleryManager instance.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>GalleryManager</code> <p>The other GalleryManager instance to compare with.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if both instances contain the same images and have the same hash type, False otherwise.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.GalleryManager.__getitem__","title":"<code>__getitem__(key)</code>","text":"<p>Gets an ImgManager instance from the gallery by key.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str or Path or ImgManager or int</code> <p>The key to retrieve the ImgManager, can be a string, path, ImgManager instance or index.</p> required <p>Returns:</p> Type Description <code>ImgManager</code> <p>The requested ImgManager instance.</p> <p>Raises:</p> Type Description <code>KeyError</code> <p>If the provided key does not match any image in the gallery.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.GalleryManager.__gt__","title":"<code>__gt__(other)</code>","text":"<p>Compares this instance with another GalleryManager instance.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>GalleryManager</code> <p>The other GalleryManager instance to compare with.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if this instance has more images than the other, False otherwise.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.GalleryManager.__hash__","title":"<code>__hash__()</code>","text":"<p>Returns a hash value for the GalleryManager instance.</p> <p>Returns:</p> Type Description <code>int</code> <p>The hash value calculated from the hashes of the images in the gallery.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.GalleryManager.__iadd__","title":"<code>__iadd__(other)</code>","text":"<p>Inserts images from another GalleryManager instance or image  into this instance.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>GalleryManager or str or ImgManager</code> <p>The images to insert.</p> required <p>Returns:</p> Type Description <code>GalleryManager</code> <p>This instance, updated with the new images.</p> <p>Raises:</p> Type Description <code>OperationNotSupportedError</code> <p>If the operation is not supported for the provided other type.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.GalleryManager.__isub__","title":"<code>__isub__(other)</code>","text":"<p>Removes images from this instance based on another GalleryManager instance or image.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>GalleryManager or str or ImgManager</code> <p>The images to remove.</p> required <p>Returns:</p> Type Description <code>GalleryManager</code> <p>This instance, updated with the remaining images after removal.</p> <p>Raises:</p> Type Description <code>OperationNotSupportedError</code> <p>If the operation is not supported for the provided other type.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.GalleryManager.__iter__","title":"<code>__iter__()</code>","text":"<p>Returns an iterator over the ImgManager instances in the gallery.</p> <p>Returns:</p> Type Description <code>iterator</code> <p>An iterator of ImgManager instances.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.GalleryManager.__len__","title":"<code>__len__()</code>","text":"<p>Returns the number of images in the gallery.</p> <p>Returns:</p> Type Description <code>int</code> <p>The number of images in the gallery.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.GalleryManager.__lt__","title":"<code>__lt__(other)</code>","text":"<p>Compares this instance with another GalleryManager instance.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>GalleryManager</code> <p>The other GalleryManager instance to compare with.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if this instance has fewer images than the other, False otherwise.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.GalleryManager.__ne__","title":"<code>__ne__(other)</code>","text":"<p>Checks inequality between this instance and another  GalleryManager instance.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>GalleryManager</code> <p>The other GalleryManager instance to compare with.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the instances are not equal, False otherwise.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.GalleryManager.__repr__","title":"<code>__repr__()</code>","text":"<p>Returns a detailed string representation of the GalleryManager instance.</p> <p>Returns:</p> Type Description <code>str</code> <p>A representation string for the GalleryManager instance.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.GalleryManager.__setitem__","title":"<code>__setitem__(key, value)</code>","text":"<p>Sets an image in the gallery at the specified key.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str or Path or ImgManager</code> <p>The key at which to set the image. Can be a string with the image file name, a path-like object of the image path, or an ImgManager instance.</p> required <code>value</code> <code>str or Path or ImgManager</code> <p>The image to set at the specified key. Can be a string, path, or ImgManager instance.</p> required <p>Raises:</p> Type Description <code>KeyError</code> <p>If the key does not match any existing images in the gallery.</p> <code>InvalidInputError</code> <p>If the value is not a string, path, or ImgManager object.</p> <code>OperationNotSupportedError</code> <p>If the operation is not supported for the provided value type.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.GalleryManager.__str__","title":"<code>__str__()</code>","text":"<p>Returns a string representation of the GalleryManager.</p> <p>Returns:</p> Type Description <code>str</code> <p>A string representation of the GalleryManager.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.GalleryManager.__sub__","title":"<code>__sub__(other)</code>","text":"<p>Removes images from this instance based on another GalleryManager  instance or image.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>GalleryManager or str or ImgManager</code> <p>The images to remove from this instance.</p> required <p>Returns:</p> Type Description <code>GalleryManager</code> <p>A new GalleryManager instance containing images left after subtraction.</p> <p>Raises:</p> Type Description <code>OperationResultsInEmptyDirectoryError</code> <p>If the resulting operation would lead to an empty directory.</p> <code>OperationNotSupportedError</code> <p>If the operation is not supported for the provided other type.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.GalleryManager.change_hashtype","title":"<code>change_hashtype(hashtype)</code>","text":"<p>Changes the hash type used for image comparisons.</p> <p>Parameters:</p> Name Type Description Default <code>hashtype</code> <code>str</code> <p>The new type of hash to use for comparing images.</p> required <p>Raises:</p> Type Description <code>ImgHashNotSupportedError</code> <p>If the specified hash type is not supported.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.GalleryManager.delete_duplicates","title":"<code>delete_duplicates()</code>","text":"<p>Deletes duplicate images in the gallery based on their hashes.</p> <p>This method checks for duplicate images and removes them from the gallery, maintaining only one instance of each unique image.</p> <p>Raises:</p> Type Description <code>ImgDeleteError</code> <p>If any errors occur during the deletion of duplicate images.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.GalleryManager.get_img_manager_index","title":"<code>get_img_manager_index(img_manager: ImgManager)</code>","text":"<p>Returns the index of the specified ImgManager in the gallery.</p> <p>Parameters:</p> Name Type Description Default <code>img_manager</code> <code>ImgManager</code> <p>The ImgManager instance to search for in the gallery.</p> required <p>Returns:</p> Type Description <code>int</code> <p>The index of the specified ImgManager.</p> <p>Raises:</p> Type Description <code>KeyError</code> <p>If the specified ImgManager is not found in the gallery.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.GalleryManager.resize_all","title":"<code>resize_all(max_size: int, keep_aspect_ratio=True, size: tuple | None = None, inplace: bool = True, output_dir: str | Path | None = None)</code>","text":"<p>Resizes all images in the gallery according to specified parameters.</p> <p>Parameters:</p> Name Type Description Default <code>max_size</code> <code>int</code> <p>The maximum size for the resized images.</p> required <code>keep_aspect_ratio</code> <code>bool</code> <p>If True, maintains the aspect ratio during resizing. Defaults to True.</p> <code>True</code> <code>size</code> <code>tuple or None</code> <p>The desired size if <code>keep_aspect_ratio</code> is False. Defaults to None.</p> <code>None</code> <code>inplace</code> <code>bool</code> <p>If True, modifies the original images. If False, saves resized images in <code>output_dir</code>. Defaults to True.</p> <code>True</code> <code>output_dir</code> <code>str or Path or None</code> <p>The directory where to output the resized images if <code>inplace</code> is False. Defaults to None.</p> <code>None</code> <p>Raises:</p> Type Description <code>InvalidInputError</code> <p>If invalid parameters are provided.</p> <code>ImgOperationError</code> <p>If the resizing operation fails.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.GalleryManager.to_html_img_gallery","title":"<code>to_html_img_gallery(output_dir: str, separate_elements: bool = False)</code>","text":"<p>Creates a standalone HTML image gallery for preview from the current directory's images.</p> <p>Parameters:</p> Name Type Description Default <code>output_dir</code> <code>str</code> <p>The directory in which to create the .html file.</p> required <code>separate_elements</code> <code>bool</code> <p>If True, return only the image gallery HTML div and necessary elements instead of a fully formatted website. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>str or tuple</code> <p>The path to the generated HTML file if <code>separate_elements</code> is False, otherwise returns a tuple containing necessary head and body elements.</p> <p>Raises:</p> Type Description <code>InvalidPathError</code> <p>If the specified output directory does not exist or is not valid.</p> <code>ImgOperationError</code> <p>If the image gallery generation fails.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.ImgManager","title":"<code>ImgManager(path: str | Path, hashtype: str = 'sha256')</code>","text":"<p>Handles image files for easier validation, comparison, and processing when using OpenCV or PIL.</p> <p>This class allows comparing images by numpy array correspondence instead of hashes using the <code>arr_equals</code> method, while the operator defaults to the specified hash comparison.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str or Path</code> <p>Path to the image file.</p> required <code>hashtype</code> <code>str</code> <p>Type of hashing to be used for comparisons. Defaults to 'sha256'. Supported hashing types include:   - sha256   - phash   - dhash   - avg_hash   - crop_resistant</p> <code>'sha256'</code> <p>Raises:</p> Type Description <code>InvalidPathError</code> <p>If the provided path does not exist.</p> <code>InvalidInputError</code> <p>If the provided path is not a file.</p> <code>ImageTypeNotSupportedError</code> <p>If the image type is not supported.</p> <code>ImageIsUnopenableError</code> <p>If Pillow cannot open the image.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.ImgManager.__bool__","title":"<code>__bool__()</code>","text":"<p>Checks if the image is not marked as deleted.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the image is not deleted, False otherwise.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.ImgManager.__eq__","title":"<code>__eq__(other)</code>","text":"<p>Compares two ImgManager instances based on their hashes.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>ImgManager</code> <p>Another ImgManager instance to compare with.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the hashes of both instances are equal, False otherwise.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.ImgManager.__hash__","title":"<code>__hash__()</code>","text":"<p>Generates a hash value for the ImgManager instance.</p> <p>Returns:</p> Type Description <code>int</code> <p>The hash value of the image.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.ImgManager.__repr__","title":"<code>__repr__()</code>","text":"<p>Returns a detailed string representation of the ImgManager instance.</p> <p>Returns:</p> Type Description <code>str</code> <p>A representation string for the ImgManager instance.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.ImgManager.__str__","title":"<code>__str__()</code>","text":"<p>Returns a string representation of the ImgManager object.</p> <p>Returns:</p> Type Description <code>str</code> <p>The string representation of the ImgManager, including the path, size, deletion status, and hash.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.ImgManager.arr_equals","title":"<code>arr_equals(other: np.ndarray)</code>","text":"<p>Compares the image array with another numpy array.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>ndarray</code> <p>The numpy array to be compared with.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the arrays are equal, False otherwise.</p> <p>Raises:</p> Type Description <code>InvalidInputError</code> <p>If <code>other</code> is not a numpy array.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.ImgManager.copy_to","title":"<code>copy_to(path: str | Path, name: str | None = None)</code>","text":"<p>Copies the image to a new directory.</p> <p>Appends a datetime.now unique suffix if a file of the same name already exists.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str or Path</code> <p>The destination path where the image will be copied.</p> required <code>name</code> <code>str or None</code> <p>The name for the copied image. Defaults to None.</p> <code>None</code> <p>Raises:</p> Type Description <code>ImageIsDeletedError</code> <p>If attempting to copy an image that has been deleted.</p> <code>InvalidInputError</code> <p>If the destination path is not valid or is not a directory.</p> <code>ImgOperationError</code> <p>If the copy operation fails for any reason.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.ImgManager.delete","title":"<code>delete()</code>","text":"<p>Deletes the image from the directory.</p> <p>Raises:</p> Type Description <code>ImageIsDeletedError</code> <p>If attempting to delete an image that is already marked as deleted.</p> <code>ImgDeleteError</code> <p>If the deletion operation fails for any reason.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.ImgManager.resize","title":"<code>resize(max_size: int, keep_aspect_ratio=True, size: tuple | None = None, inplace: bool = True, output_dir: str | Path | None = None)</code>","text":"<p>Resizes the image to a specified maximum size.</p> <p>Parameters:</p> Name Type Description Default <code>max_size</code> <code>int</code> <p>The maximum size for the resized image.</p> required <code>keep_aspect_ratio</code> <code>bool</code> <p>If True, maintains the aspect ratio during resizing. Defaults to True.</p> <code>True</code> <code>size</code> <code>tuple or None</code> <p>The desired size if <code>keep_aspect_ratio</code> is False. Defaults to None.</p> <code>None</code> <code>inplace</code> <code>bool</code> <p>If True, modifies the original image. If False, saves a new image. Defaults to True.</p> <code>True</code> <code>output_dir</code> <code>str or Path or None</code> <p>The directory where to output the resized image if <code>inplace</code> is False. Defaults to None.</p> <code>None</code> <p>Raises:</p> Type Description <code>InvalidInputError</code> <p>If invalid parameters are provided.</p> <code>ImgOperationError</code> <p>If the resizing operation fails.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.ImgManager.to_hash","title":"<code>to_hash(hashtype: str = 'sha256')</code>","text":"<p>Generates a hash for the image using the specified hash type.</p> <p>Parameters:</p> Name Type Description Default <code>hashtype</code> <code>str</code> <p>The hashing algorithm to use. Defaults to 'sha256'.</p> <code>'sha256'</code> <p>Returns:</p> Type Description <code>str</code> <p>The resulting hash as a string.</p> <p>Raises:</p> Type Description <code>ImgHashNotSupportedError</code> <p>If the specified hash type is not supported.</p> <code>ImageIsDeletedError</code> <p>If attempting to generate a hash for a deleted image.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.ImgManager.to_html_base64","title":"<code>to_html_base64(no_html_tag=False)</code>","text":"<p>Converts the image to base64 and returns an HTML img tag.</p> <p>Reads the image in binary mode, encodes it to base64, and returns an HTML img tag.</p> <p>Parameters:</p> Name Type Description Default <code>no_html_tag</code> <code>bool</code> <p>If True, returns only the base64 string without the HTML img tag. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>The base64 image string or an HTML img tag depending on the <code>no_html_tag</code> parameter.</p> <p>Raises:</p> Type Description <code>ImageIsDeletedError</code> <p>If attempting to convert an image that has been deleted.</p> <code>ImgOperationError</code> <p>If the conversion to base64 fails.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.TmpManager","title":"<code>TmpManager(hashtype: str, save_content_on_deletion: bool = False, output_dir: str | Path | None = None)</code>","text":"<p>               Bases: <code>GalleryManager</code></p> <p>Handles creation and deletion of a temporary directory for image operations.</p> <p>This class extends the GalleryManager to use a temporary directory, providing methods to manage images within that directory.</p> <p>Parameters:</p> Name Type Description Default <code>hashtype</code> <code>str</code> <p>The type of hash to use for image comparisons.</p> required <code>save_content_on_deletion</code> <code>bool</code> <p>If True, saves the contents of the temporary directory upon deletion. Defaults to False.</p> <code>False</code> <code>output_dir</code> <code>str or Path</code> <p>The output directory where contents might be saved. If None, uses a default temporary path.</p> <code>None</code> <p>Raises:</p> Type Description <code>InvalidInputError</code> <p>If output_dir is not a string or path-like object, or if it does not exist.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.TmpManager.__del__","title":"<code>__del__()</code>","text":"<p>Ensures cleanup of the temporary directory when the instance is deleted.</p> <p>This method is called when the instance is about to be destroyed. It cleans up the temporary directory if it hasn't already been cleaned up.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.TmpManager.__enter__","title":"<code>__enter__()</code>","text":"<p>Enters the context of the temporary directory manager.</p> <p>Creates a temporary directory and initializes the gallery manager parameters.</p> <p>Returns:</p> Type Description <code>TmpManager</code> <p>The instance of TmpManager.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.TmpManager.__exit__","title":"<code>__exit__(exc_type, exc_val, exc_tb)</code>","text":"<p>Exits the context of the temporary directory manager.</p> <p>Cleans up the temporary directory and optionally saves contents if required.</p> <p>Parameters:</p> Name Type Description Default <code>exc_type</code> <code>type</code> <p>The type of exception that triggered the exit.</p> required <code>exc_val</code> <code>Exception</code> <p>The exception instance that triggered the exit.</p> required <code>exc_tb</code> <code>traceback</code> <p>The traceback object.</p> required <p>Raises:</p> Type Description <code>Exception</code> <p>Propagates any exceptions that occur during the cleaning process.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.TmpManager.__repr__","title":"<code>__repr__()</code>","text":"<p>Returns a detailed string representation of the TmpManager instance.</p> <p>Returns:</p> Type Description <code>str</code> <p>A representation string for the TmpManager, including hash type and save content status.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.TmpManager.__str__","title":"<code>__str__()</code>","text":"<p>Returns a string representation of the TmpManager instance.</p> <p>Returns:</p> Type Description <code>str</code> <p>A string describing the temporary directory name and its open status.</p>"},{"location":"sysfilemanager/#charloratools.SysFileManager.refresh_decorator","title":"<code>refresh_decorator(func)</code>","text":"<p>Decorator to refresh the image manager's state before and after method execution.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>callable</code> <p>The function to be wrapped.</p> required <p>Returns:</p> Type Description <code>callable</code> <p>A wrapper function that executes the original function and refreshes the state.</p>"},{"location":"utils/","title":"utils","text":""},{"location":"utils/#charloratools.utils","title":"<code>charloratools.utils</code>","text":"Functionalities <ul> <li>image processing</li> <li>facial recognition</li> <li>scraping functionalities</li> <li>validating image directories</li> <li>downloading from URLs</li> <li>initializing Selenium drivers</li> <li>various image transformation utilities.</li> </ul> <p>Functions:</p> Name Description <code>torch_import</code> <p>Attempts to import the PyTorch library and its torchvision transforms. Raises errors if unsuccessful.</p> <code>dirisvalid</code> <p>create_if_not_found=False, show_tqdm=False) Validates a directory path and checks for image files. Optionally creates the directory if it does not exist.</p> <code>GetUniqueDtStr</code> <p>Generates a unique timestamp string for file naming.</p> <code>save_with_detection_box</code> <p>Saves an image with drawn detection boxes to a specified output directory.</p> <code>distance_function</code> <p>threshold=None) Calculates the distance between two embeddings using either Euclidean distance or cosine similarity.</p> <code>InfoDict2Pandas</code> <p>Converts and validates an info dictionary returned by filtering methods into a formatted Pandas DataFrame.</p> <code>is_matched</code> <p>Returns the DataFrame element if it matches (i.e., 'matched' is True).</p> <code>not_is_matched</code> <p>Returns the DataFrame element if it does not match (i.e., 'matched' is False).</p> <code>split_matched</code> <p>Separates an info dictionary into matched and not matched items, returning Pandas DataFrames.</p> <code>initialize_driver</code> <p>Initializes a Selenium Chrome Web Driver with specified options.</p> <code>page_scroll</code> <p>Scrolls a webpage a specified number of times using Selenium WebDriver.</p> <code>download_from_src</code> <p>Downloads images from provided URL sources and checks for corruption.</p> <code>img_path_to_tensor</code> <p>Converts an image at the specified path to a tensor,optionally resizing it.</p> <code>dir_path_to_img_batch</code> <p>Converts all images in a directory to a batch of tensors.</p> <p>Raises:</p> Type Description <code>TorchNotInstalledError</code> <p>Raised when the required PyTorch library is not found.</p> <code>InvalidInputError</code> <p>Raised for invalid inputs or parameters.</p> <code>InvalidTypeError</code> <p>Raised when the type of the provided path is not suitable.</p> <code>NoImagesInDirectoryError</code> <p>Raised when no images are found in the specified directory.</p> <code>ErrorScrollingPage</code> <p>Raised when an error occurs while scrolling a webpage with Selenium.</p> <code>FailedToAddOptionsArgumentError</code> <p>Raised when additional arguments for the webdriver cannot be added.</p> <code>DriverInitializationError</code> <p>Raised when the Selenium driver fails to initialize.</p> <code>ImageDownloadError</code> <p>Raised when an error occurs during image downloading.</p> <code>InfoDictFormatError</code> <p>Raised when the format of the info dictionary is invalid.</p> <p>Examples:</p> <pre><code>from charloratools.utils import dirisvalid, download_from_src\nvalid_dir, image_info = dirisvalid('path/to/images', return_info=True)\ndownload_from_src(['http://example.com/image1.jpg'],\n                   'prefix', 'path/to/download', logger)\n</code></pre>"},{"location":"utils/#charloratools.utils.GetUniqueDtStr","title":"<code>GetUniqueDtStr()</code>","text":"<p>Generates a unique timestamp string for file naming.</p> <p>Returns:</p> Type Description <code>str</code> <p>A unique timestamp string formatted as <code>MMDDYYHHMMSSffffff</code>.</p>"},{"location":"utils/#charloratools.utils.InfoDict2Pandas","title":"<code>InfoDict2Pandas(info: dict | list)</code>","text":"<p>Validates and converts an info dictionary to a Pandas DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>info</code> <code>dict or list</code> <p>Info dictionary returned by filtering methods of FaceRecognizer.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary containing DataFrames of matched and not matched items.</p> <p>Raises:</p> Type Description <code>InfoDictFormatError</code> <p>If the format of the provided info dictionary is invalid.</p>"},{"location":"utils/#charloratools.utils.dir_path_to_img_batch","title":"<code>dir_path_to_img_batch(path)</code>","text":"<p>Converts all images in a directory to a batch of tensors.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str or Path</code> <p>Path to the directory containing image files.</p> required <p>Returns:</p> Type Description <code>Tensor</code> <p>A tensor representing a batch of images.</p> <p>Raises:</p> Type Description <code>InvalidInputError</code> <p>If path is not a valid directory or contains unsupported file types.</p>"},{"location":"utils/#charloratools.utils.dirisvalid","title":"<code>dirisvalid(path: str | Path, check_images: bool = True, return_info: bool = False, hashtype: str | None = None, create_if_not_found: bool = False, show_tqdm: bool = False)</code>","text":"<p>Checks the validity of a directory and its image contents or creates a new directory.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str or Path</code> <p>Path to the directory to validate or create.</p> required <code>check_images</code> <code>bool</code> <p>Whether to check if at least one image exists in the directory. Defaults to True.</p> <code>True</code> <code>return_info</code> <code>bool</code> <p>If True, returns number of images in the directory and their paths. Defaults to False.</p> <code>False</code> <code>hashtype</code> <code>str or None</code> <p>Hash type to use for hashing images. Must be provided if return_info=True. Defaults to None.</p> <code>None</code> <code>create_if_not_found</code> <code>bool</code> <p>If True, creates the directory if it does not exist. Defaults to False.</p> <code>False</code> <code>show_tqdm</code> <code>bool</code> <p>If True, shows progress with tqdm during image loading and hashing. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>Path or tuple</code> <p>If return_info is False, returns the resolved directory path. If return_info is True, returns a tuple containing the directory path and a dictionary of images.</p> <p>Raises:</p> Type Description <code>InvalidTypeError</code> <p>If the provided path is not a string or path-like object.</p> <code>InvalidPathError</code> <p>If the directory does not exist and create_if_not_found is False.</p> <code>NoImagesInDirectoryError</code> <p>If no images are found in the directory when check_images is True.</p>"},{"location":"utils/#charloratools.utils.distance_function","title":"<code>distance_function(embedding1, embedding2, method, classify=False, threshold=None)</code>","text":"<p>Calculates the distance between two embeddings using a specified method.</p> <p>Parameters:</p> Name Type Description Default <code>embedding1</code> <code>Tensor</code> <p>The first embedding tensor.</p> required <code>embedding2</code> <code>Tensor</code> <p>The second embedding tensor.</p> required <code>method</code> <code>str</code> <p>The distance method to use ('euclidean' or 'cosine').</p> required <code>classify</code> <code>bool</code> <p>If True, classify embeddings as matching based on the provided threshold. Defaults to False.</p> <code>False</code> <code>threshold</code> <code>float</code> <p>Threshold for classifying embeddings when classify is True. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>float or bool</code> <p>If classify is False, returns the calculated distance. If classify is True, returns whether the embeddings match based on the threshold.</p> <p>Raises:</p> Type Description <code>InvalidInputError</code> <p>If the provided method is not supported or if threshold is None when classify is True.</p>"},{"location":"utils/#charloratools.utils.download_from_src","title":"<code>download_from_src(srcs, prefix, save_path, logger)</code>","text":"<p>Downloads images from the provided URL sources and checks for corruption.</p> <p>Parameters:</p> Name Type Description Default <code>srcs</code> <code>list</code> <p>List of URL strings to download images from.</p> required <code>prefix</code> <code>str</code> <p>Prefix string to prepend to each downloaded image filename.</p> required <code>save_path</code> <code>str or Path</code> <p>Path to the directory where downloaded images will be saved.</p> required <code>logger</code> <code>Logger</code> <p>Logger instance for logging download activity.</p> required <p>Raises:</p> Type Description <code>ImageDownloadError</code> <p>If an error occurs during the image downloading process.</p>"},{"location":"utils/#charloratools.utils.img_path_to_tensor","title":"<code>img_path_to_tensor(img_path, nsize=None)</code>","text":"<p>Converts an image at the specified path to a tensor.</p> <p>Parameters:</p> Name Type Description Default <code>img_path</code> <code>str or Path</code> <p>Path to the image file.</p> required <code>nsize</code> <code>tuple of int or None</code> <p>Size to which to resize the image, if specified. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>Tensor</code> <p>A tensor representation of the image.</p> <p>Raises:</p> Type Description <code>InvalidInputError</code> <p>If img_path is not a string or Path object or if the file type is not supported.</p>"},{"location":"utils/#charloratools.utils.initialize_driver","title":"<code>initialize_driver(headless: bool = True, incognito: bool = True, add_arguments: list | None = None)</code>","text":"<p>Initializes a Selenium Chrome Web Driver with specified options.</p> <p>Parameters:</p> Name Type Description Default <code>headless</code> <code>bool</code> <p>If True, runs the driver in headless mode. Defaults to True.</p> <code>True</code> <code>incognito</code> <code>bool</code> <p>If True, runs the driver in incognito mode. Defaults to True.</p> <code>True</code> <code>add_arguments</code> <code>list or None</code> <p>Additional arguments to pass to the web driver. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>Chrome</code> <p>Initialized Chrome Web Driver instance.</p> <p>Raises:</p> Type Description <code>FailedToAddOptionsArgumentError</code> <p>If adding additional arguments to the WebDriver fails.</p> <code>DriverInitializationError</code> <p>If the driver fails to initialize.</p>"},{"location":"utils/#charloratools.utils.is_matched","title":"<code>is_matched(df_el)</code>","text":"<p>Checks if a DataFrame element is matched.</p> <p>Parameters:</p> Name Type Description Default <code>df_el</code> <code>Series</code> <p>A row of the DataFrame.</p> required <p>Returns:</p> Type Description <code>Series or None</code> <p>Returns the row if 'matched' is True; otherwise, returns None.</p>"},{"location":"utils/#charloratools.utils.not_is_matched","title":"<code>not_is_matched(df_el)</code>","text":"<p>Checks if a DataFrame element is not matched.</p> <p>Parameters:</p> Name Type Description Default <code>df_el</code> <code>Series</code> <p>A row of the DataFrame.</p> required <p>Returns:</p> Type Description <code>Series or None</code> <p>Returns the row if 'matched' is False; otherwise, returns None.</p>"},{"location":"utils/#charloratools.utils.page_scroll","title":"<code>page_scroll(driver, n, webpage_wait_time)</code>","text":"<p>Scrolls a webpage 'n' times using Selenium WebDriver.</p> <p>Parameters:</p> Name Type Description Default <code>driver</code> <code>Chrome</code> <p>The Selenium WebDriver instance.</p> required <code>n</code> <code>int</code> <p>The number of times to scroll the page.</p> required <code>webpage_wait_time</code> <code>float</code> <p>Time in seconds to wait for the page to load after scrolling.</p> required <p>Raises:</p> Type Description <code>ErrorScrollingPage</code> <p>If an error occurs while scrolling.</p>"},{"location":"utils/#charloratools.utils.save_with_detection_box","title":"<code>save_with_detection_box(img_path: str | Path, outdir: str | Path, boxes)</code>","text":"<p>Saves an image with detection boxes drawn on it to the specified output directory.</p> <p>Parameters:</p> Name Type Description Default <code>img_path</code> <code>str or Path</code> <p>Path to the image file.</p> required <code>outdir</code> <code>str or Path</code> <p>Path to the directory where the output image will be saved.</p> required <code>boxes</code> <code>list</code> <p>List of bounding boxes to be drawn on the image.</p> required <p>Raises:</p> Type Description <code>InvalidTypeError</code> <p>If img_path or outdir is not of string or Path type.</p>"},{"location":"utils/#charloratools.utils.split_matched","title":"<code>split_matched(info_dict: dict | list)</code>","text":"<p>Separates an info dictionary into matched and not matched items.</p> <p>Parameters:</p> Name Type Description Default <code>info_dict</code> <code>dict or list</code> <p>Info dictionary returned by filtering methods.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary containing DataFrames of matched and not matched items.</p>"},{"location":"utils/#charloratools.utils.torch_import","title":"<code>torch_import()</code>","text":"<p>Attempts to import the PyTorch library and its torchvision transforms.</p> <p>Returns:</p> Type Description <code>tuple</code> <p>A tuple containing the PyTorch and torchvision transforms modules.</p> <p>Raises:</p> Type Description <code>TorchNotInstalledError</code> <p>If the PyTorch library is not installed.</p>"},{"location":"blog/","title":"News","text":""}]}